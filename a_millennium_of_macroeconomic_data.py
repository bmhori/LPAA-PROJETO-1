# -*- coding: utf-8 -*-
"""A millennium of macroeconomic data

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A512zPtHUWiFCc6cZJR6p90FNU9iLjdt
"""

!git clone https://github.com/bmhori/LPAA-PROJETO-1.git

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import os


# Carregando o conjunto de dados
dadossheet1 = pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 5,skiprows=7)
dadossheet2 = pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 6,skiprows=10)
dadossheet3 = pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 7,skiprows=7)
dadossheet4= pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 8,skiprows=7)
dadossheet5 = pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 9,skiprows=7)
dadossheet6 = pd.read_excel('/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx', sheet_name= 10, usecols= range(0,12), skiprows=7)
dados2 = pd.read_csv('/content/LPAA-PROJETO-1/excel_sheet_names.csv')
dados3 = pd.read_csv('/content/LPAA-PROJETO-1/millenniumofdata_v3_headlines.csv')

display(dadossheet1)

dadossheet2 = dadossheet2.dropna(axis=1, how='all')
display(dadossheet2)

dadossheet3 = dadossheet3.dropna(axis=1, how='all')
display(dadossheet3)

display(dadossheet4)

dadossheet5 = dadossheet5.dropna(axis=1, how='all')
dadossheet5.rename(columns={dadossheet5.columns[0]: 'Year'}, inplace=True)
display(dadossheet5)

dadossheet6.rename(columns={dadossheet6.columns[0]: 'Year'}, inplace=True)
dadossheet6.rename(columns={dadossheet6.columns[6]: 'Nominal GDP (mln £)'}, inplace=True)
dadossheet6 = dadossheet6.dropna(axis=1)
display(dadossheet6)

display(dados2)

dados3 = dados3.dropna(axis=1, how='all')
display(dados3)

## Análise Qualitativa
## Exibindo as primeiras linhas do DataFrame
#print("Primeras linhas do DataFrame1:")
#print(dados.head())
##
#print("\n Primeras linhas do DataFrame2: \n")
#print(dados2.head())
#
#print("\n Primeras linhas do DataFrame3:")
#print(dados3.head())
#
### Verificando informações gerais do DataFrame
#print("\nInformações Gerais do DataFrame:")
#print(dados.info())
##
#print("\nInformações Gerais do DataFrame2:")
#print(dados2.info())
##
#print("\nInformações Gerais do DataFrame3:")
#print(dados3.info())
#
#print("\nEstatísticas Descritivas :")
#print(dados2.describe())
### Estatísticas descritivas para colunas numéricas
#print("\nEstatísticas Descritivas :")
#print(dados3.describe())
#
## Análise Quantitativa
## Contagem de valores únicos em uma coluna
#print("\nContagem de Valores Únicos:")
#print(dados[nome_da_coluna].value_counts())
## Histograma de uma coluna numérica
#plt.figure(figsize=(10, 6))
#sns.histplot(dados['Nome_da_Coluna'], bins=20, kde=True)
#plt.title('Histograma da Coluna')
#plt.xlabel('Valores')
#plt.ylabel('Frequência')
#plt.show()
#
## Análise Exploratória
## Correlação entre colunas numéricas
#correlacao = dados.corr()
#plt.figure(figsize=(10, 8))
#sns.heatmap(correlacao, annot=True, cmap='coolwarm', fmt='.2f', linewidths=.5)
#plt.title('Mapa de Calor de Correlação')
#plt.show()
#
## Gráfico de dispersão entre duas colunas numéricas
#plt.figure(figsize=(10, 6))
#sns.scatterplot(x='Coluna_X', y='Coluna_Y', data=dados)
#plt.title('Gráfico de Dispersão entre Coluna_X e Coluna_Y')
#plt.show()
#

# Ler dados do arquivo Excel
excel_file = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet1 = pd.read_excel(excel_file, sheet_name=5, skiprows=7)

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print(dadossheet1.head())

# Gráfico de linhas para mostrar a evolução da população ao longo dos anos
plt.figure(figsize=(10, 6))

# Automatizar a obtenção dos nomes das colunas, exceto a coluna 'Year'
colunas = dadossheet1.columns.difference(['Year'])

# Criar um gráfico de linha para cada coluna
for coluna in colunas:
    plt.plot(dadossheet1['Year'], dadossheet1[coluna], label=coluna)

plt.title('Population Over Years')
plt.xlabel('Year')
plt.ylabel('Population (millions)')
plt.legend()
plt.show()

# Análise Quantitativa
quantitative_analysis = pd.DataFrame()

# Estatísticas Descritivas
quantitative_analysis['Mean'] = dadossheet1[colunas].mean()
quantitative_analysis['Median'] = dadossheet1[colunas].median()
quantitative_analysis['Min'] = dadossheet1[colunas].min()
quantitative_analysis['Max'] = dadossheet1[colunas].max()
quantitative_analysis['Std Dev'] = dadossheet1[colunas].std()

# Crescimento Percentual Anual
for coluna in colunas:
    quantitative_analysis[f'{coluna} Growth (%)'] = dadossheet1[coluna].pct_change() * 100

# Correlação
quantitative_analysis['Correlation'] = dadossheet1[colunas].corr().loc['Population of England, millions']

# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis)

# Boxplot para cada coluna de população
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet1[colunas])
plt.title('Boxplot - População ao longo dos Anos')
plt.ylabel('População (millions)')
plt.show()

# Histograma para cada coluna de população
plt.figure(figsize=(12, 8))
dadossheet1[colunas].hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - População ao longo dos Anos', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet1[colunas].corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação entre Colunas de População')
plt.show()

# Ler dados do segundo arquivo Excel

excel_file2 = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet2 = pd.read_excel(excel_file2, sheet_name= 6,skiprows=10)

# Remover colunas com valores nulos em todas as linhas
dadossheet2 = dadossheet2.dropna(axis=1, how='all')

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print(dadossheet2.head())

# Realizar uma análise qualitativa dos dados
# Por exemplo, você pode querer explorar estatísticas descritivas, como médias, medianas, máximos, mínimos, etc.
print("\nEstatísticas Descritivas:")
print(dadossheet2.describe())

# Verificar tipos de dados
print("\nTipos de Dados:")
print(dadossheet2.dtypes)

# Contar valores únicos em cada coluna
print("\nContagem de Valores Únicos:")
for column in dadossheet2.columns:
    unique_values = dadossheet2[column].nunique()
    print(f"{column}: {unique_values} valores únicos")

# Remover colunas com valores nulos em todas as linhas
dadossheet2 = dadossheet2.dropna(axis=1, how='all')

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print(dadossheet2.head())

# Convertendo a coluna 'Wheat' para string se ela contiver valores não string
dadossheet2['Wheat'] = dadossheet2['Wheat'].astype(str)
sampled_data = dadossheet2.sample(n=10)
# Visualizar distribuição de valores categóricos
plt.figure(figsize=(12, 6))
sns.lineplot(x='Year', y='Wheat', data=sampled_data, marker='o', color='blue')
plt.title('Distribuição de Valores de Wheat')
plt.xlabel('Year')
plt.ylabel('Wheat')

plt.xlim(dadossheet2['Year'].min(), dadossheet2['Year'].max())
plt.show()

# Realizar uma análise qualitativa dos dados
# Estatísticas Descritivas
print("\nEstatísticas Descritivas:")
print(dadossheet2.describe())

# Verificar tipos de dados
print("\nTipos de Dados:")
print(dadossheet2.dtypes)

# Contar valores únicos em cada coluna
print("\nContagem de Valores Únicos:")
for column in dadossheet2.columns:
    unique_values = dadossheet2[column].nunique()
    print(f"{column}: {unique_values} valores únicos")

# Convertendo a coluna 'Wheat' para string se ela contiver valores não string
dadossheet2['Wheat'] = dadossheet2['Wheat'].astype(str)

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print("\nPrimeiras Linhas do DataFrame:")
print(dadossheet2.head())

# Análise Quantitativa
quantitative_analysis_2 = pd.DataFrame()
# Remover colunas com valores nulos em todas as linhas
dadossheet2 = dadossheet2.dropna(axis=1, how='all')

# Realizar uma análise qualitativa dos dados
# Estatísticas Descritivas
print("\nEstatísticas Descritivas:")
print(dadossheet2.describe())

# Verificar tipos de dados
print("\nTipos de Dados:")
print(dadossheet2.dtypes)

# Contar valores únicos em cada coluna
print("\nContagem de Valores Únicos:")
for column in dadossheet2.columns:
    unique_values = dadossheet2[column].nunique()
    print(f"{column}: {unique_values} valores únicos")

# Convertendo a coluna 'Wheat' para float antes de calcular o crescimento percentual
dadossheet2['Wheat'] = pd.to_numeric(dadossheet2['Wheat'], errors='coerce')

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print("\nPrimeiras Linhas do DataFrame:")
print(dadossheet2.head())

# Análise Quantitativa
quantitative_analysis_2 = pd.DataFrame()

# Estatísticas Descritivas
quantitative_analysis_2['Mean'] = dadossheet2.mean()
quantitative_analysis_2['Median'] = dadossheet2.median()
quantitative_analysis_2['Min'] = dadossheet2.min()
quantitative_analysis_2['Max'] = dadossheet2.max()
quantitative_analysis_2['Std Dev'] = dadossheet2.std()

# Crescimento Percentual Anual para a coluna 'Wheat'
quantitative_analysis_2['Wheat Growth (%)'] = dadossheet2['Wheat'].pct_change() * 100

# Correlação
quantitative_analysis_2['Correlation'] = dadossheet2.corr().loc['Wheat']

# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis_2)

# Análise Exploratória
# Boxplot para cada coluna
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet2)
plt.title('Boxplot - Dados do dadossheet2')
plt.xticks(rotation=45, ha='right')
plt.show()

# Histograma para cada coluna
plt.figure(figsize=(12, 8))
dadossheet2.hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - Dados do dadossheet2', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet2.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação - Dados do dadossheet2')
plt.show()

# Ler dados do terceiro arquivo Excel
excel_file3 = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet3 = pd.read_excel(excel_file3, sheet_name=7, skiprows=7)

# Remover colunas com valores nulos em todas as linhas
dadossheet3 = dadossheet3.dropna(axis=1, how='all')

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print(dadossheet3.head())

# Amostrar 20 pontos para exibir no gráfico
sampled_data = dadossheet3.sample(n=20)

# Lista de todas as colunas exceto 'Year'
colunas = dadossheet3.columns.difference(['Year'])

# Criar um gráfico de linha para cada coluna
plt.figure(figsize=(15, 8))
for coluna in colunas:
    sns.lineplot(x='Year', y=dadossheet3[coluna], data=sampled_data, marker='o', label=coluna)

plt.title('Distribuição de Valores ao longo do Tempo')
plt.xlabel('Year')
plt.ylabel('Valor')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

plt.show()

# Análise Quantitativa
quantitative_analysis_3 = pd.DataFrame()

# Estatísticas Descritivas
quantitative_analysis_3['Mean'] = dadossheet3.mean()
quantitative_analysis_3['Median'] = dadossheet3.median()
quantitative_analysis_3['Min'] = dadossheet3.min()
quantitative_analysis_3['Max'] = dadossheet3.max()
quantitative_analysis_3['Std Dev'] = dadossheet3.std()

# Crescimento Percentual Anual para todas as colunas numéricas
numeric_columns = dadossheet3.select_dtypes(include='number').columns
for coluna in numeric_columns:
    quantitative_analysis_3[f'{coluna} Growth (%)'] = dadossheet3[coluna].pct_change() * 100

# Correlação
quantitative_analysis_3['Correlation'] = dadossheet3.corr().loc['Year']

# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis_3)

# Análise Exploratória
# Boxplot para cada coluna
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet3)
plt.title('Boxplot - Dados do dadossheet3')
plt.xticks(rotation=45, ha='right')
plt.show()

# Histograma para cada coluna
plt.figure(figsize=(12, 8))
dadossheet3.hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - Dados do dadossheet3', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet3.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação - Dados do dadossheet3')
plt.show()

# Ler dados do quarto arquivo Excel
excel_file4 = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet4 = pd.read_excel(excel_file4, sheet_name=8, skiprows=7)

# Remover colunas com valores nulos em todas as linhas
dadossheet4 = dadossheet4.dropna(axis=1, how='all')

# Exibir as primeiras linhas do DataFrame para verificar as colunas disponíveis
print(dadossheet4.head())

# Amostrar 20 pontos para exibir no gráfico
sampled_data = dadossheet4.sample(n=20)

# Lista de todas as colunas exceto 'Year'
colunas = dadossheet4.columns.difference(['Year'])

# Criar um gráfico de linha para cada coluna
plt.figure(figsize=(15, 8))
for coluna in colunas:
    sns.lineplot(x='Year', y=dadossheet4[coluna], data=sampled_data, marker='o', label=coluna)

plt.title('Distribuição de Valores ao longo do Tempo')
plt.xlabel('Year')
plt.ylabel('Valor')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

plt.show()

# Análise Quantitativa
quantitative_analysis_4 = pd.DataFrame()

# Estatísticas Descritivas
quantitative_analysis_4['Mean'] = dadossheet4.mean()
quantitative_analysis_4['Median'] = dadossheet4.median()
quantitative_analysis_4['Min'] = dadossheet4.min()
quantitative_analysis_4['Max'] = dadossheet4.max()
quantitative_analysis_4['Std Dev'] = dadossheet4.std()

# Crescimento Percentual Anual para todas as colunas numéricas
numeric_columns = dadossheet4.select_dtypes(include='number').columns
for coluna in numeric_columns:
    quantitative_analysis_4[f'{coluna} Growth (%)'] = dadossheet4[coluna].pct_change() * 100

# Correlação
quantitative_analysis_4['Correlation'] = dadossheet4.corr().loc['Year']

# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis_4)

# Análise Exploratória
# Boxplot para cada coluna
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet4)
plt.title('Boxplot - Dados do dadossheet4')
plt.xticks(rotation=45, ha='right')
plt.show()

# Histograma para cada coluna
plt.figure(figsize=(12, 8))
dadossheet4.hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - Dados do dadossheet4', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet4.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação - Dados do dadossheet4')
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import re  # Importar a biblioteca de expressões regulares


# Ler dados do quinto arquivo Excel
excel_file5 = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet5 = pd.read_excel(excel_file5, sheet_name=9, skiprows=7)

# Criar uma cópia do DataFrame
dadossheet5_copy = dadossheet5.copy()

# Renomear a primeira coluna para 'Year'
dadossheet5_copy = dadossheet5_copy.rename(columns={dadossheet5_copy.columns[0]: 'Year'})

# Remover caracteres não numéricos da coluna 'Year'
dadossheet5_copy['Year'] = dadossheet5_copy['Year'].apply(lambda x: re.sub(r'\D', '', str(x)))

# Converter a coluna 'Year' para inteiro
dadossheet5_copy['Year'] = pd.to_numeric(dadossheet5_copy['Year'], errors='coerce')

# Remover colunas com valores nulos em todas as linhas
dadossheet5_copy = dadossheet5_copy.dropna(axis=1, how='all')

# Converter a coluna 'Year' para datetime
dadossheet5_copy['Year'] = pd.to_datetime(dadossheet5_copy['Year'], format='%Y', errors='coerce')

# Converter a coluna 'Year' para strings
dadossheet5_copy['Year'] = dadossheet5_copy['Year'].astype(str)

# Lista de todas as colunas exceto 'Year'
colunas = dadossheet5_copy.columns.difference(['Year'])


# Criar um gráfico de linha para cada coluna
plt.figure(figsize=(16, 8))
for coluna in colunas:
    # Certificar-se de que a coluna tenha o tipo de dado correto
    dadossheet5_copy[coluna] = pd.to_numeric(dadossheet5_copy[coluna], errors='coerce')
    sns.lineplot(x='Year', y=coluna, data=dadossheet5_copy, marker='o', label=coluna)

plt.title('Distribuição de Valores ao longo do Tempo')
plt.xlabel('Year')
plt.ylabel('Valor')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

plt.show()
# Exibir as colunas após remover colunas nulas
print("Colunas após remover colunas nulas:")
print(dadossheet5_copy.columns)


# Exibir as colunas após remover colunas nulas
print("Colunas após remover colunas nulas:")
print(dadossheet5_copy.columns)

# Análise Quantitativa
quantitative_analysis_5 = pd.DataFrame()

# Selecionar apenas colunas numéricas
numeric_columns = dadossheet5_copy.select_dtypes(include='number').columns

# Estatísticas Descritivas
quantitative_analysis_5['Média'] = dadossheet5_copy[numeric_columns].mean()
quantitative_analysis_5['Mediana'] = dadossheet5_copy[numeric_columns].median()
quantitative_analysis_5['Mínimo'] = dadossheet5_copy[numeric_columns].min()
quantitative_analysis_5['Máximo'] = dadossheet5_copy[numeric_columns].max()
quantitative_analysis_5['Desvio Padrão'] = dadossheet5_copy[numeric_columns].std()

# Crescimento Percentual Anual para todas as colunas numéricas
for coluna in numeric_columns:
    quantitative_analysis_5[f'{coluna} Crescimento (%)'] = dadossheet5_copy[coluna].pct_change() * 100

# Remover caracteres não numéricos da coluna 'Year'
dadossheet5_copy['Year'] = dadossheet5_copy['Year'].apply(lambda x: re.sub(r'\D', '', str(x)))

# Converter a coluna 'Year' para inteiro
dadossheet5_copy['Year'] = pd.to_numeric(dadossheet5_copy['Year'], errors='coerce')
# Correlação
quantitative_analysis_5['Correlação'] = dadossheet5_copy.corrwith(dadossheet5_copy['Year']).reindex(numeric_columns)


# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis_5)

# Análise Exploratória
# Boxplot para cada coluna
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet5_copy)
plt.title('Boxplot - Dados do dadossheet5_copy')
plt.xticks(rotation=45, ha='right')
plt.show()

# Histograma para cada coluna
plt.figure(figsize=(12, 8))
dadossheet5_copy.hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - Dados do dadossheet5_copy', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet5_copy.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação - Dados do dadossheet5_copy')
plt.show()

# Ler dados do sexto arquivo Excel
excel_file6 = '/content/LPAA-PROJETO-1/millenniumofdata_v3_final.xlsx'
dadossheet6 = pd.read_excel(excel_file6, sheet_name=10, usecols=range(0, 12), skiprows=7)

# Renomear a primeira coluna para 'Year'
dadossheet6.rename(columns={dadossheet6.columns[0]: 'Year'}, inplace=True)

# Remover colunas com valores nulos em todas as linhas
dadossheet6 = dadossheet6.dropna(axis=1, how='all')

# Amostrar 25 pontos para exibir no gráfico
sampled_data = dadossheet6.sample(n=25)

# Converter a coluna 'Year' para string
sampled_data['Year'] = sampled_data['Year'].astype(str)

# Lista de todas as colunas exceto 'Year'
colunas = dadossheet6.columns.difference(['Year'])

# Criar um gráfico de linha para cada coluna (amostragem)
plt.figure(figsize=(16, 8))
for coluna in colunas:
    sns.lineplot(x='Year', y=coluna, data=sampled_data, marker='o', label=coluna)

plt.title('Distribuição de Valores ao longo do Tempo')
plt.xlabel('Year')
plt.ylabel('Valor')
plt.legend(loc='upper left', bbox_to_anchor=(1, 1))

plt.show()

# Análise Quantitativa
quantitative_analysis_6 = pd.DataFrame()

# Selecionar apenas colunas numéricas
numeric_columns = dadossheet6.select_dtypes(include='number').columns

# Estatísticas Descritivas
quantitative_analysis_6['Média'] = dadossheet6[numeric_columns].mean()
quantitative_analysis_6['Mediana'] = dadossheet6[numeric_columns].median()
quantitative_analysis_6['Mínimo'] = dadossheet6[numeric_columns].min()
quantitative_analysis_6['Máximo'] = dadossheet6[numeric_columns].max()
quantitative_analysis_6['Desvio Padrão'] = dadossheet6[numeric_columns].std()

# Crescimento Percentual Anual para todas as colunas numéricas
for coluna in numeric_columns:
    quantitative_analysis_6[f'{coluna} Crescimento (%)'] = dadossheet6[coluna].pct_change() * 100

# Correlação
quantitative_analysis_6['Correlação'] = dadossheet6[numeric_columns].corr().loc['Year']

# Exibir a análise quantitativa
print('\nAnálise Quantitativa:')
print(quantitative_analysis_6)

# Análise Exploratória
# Boxplot para cada coluna
plt.figure(figsize=(12, 8))
sns.boxplot(data=dadossheet6)
plt.title('Boxplot - Dados do dadossheet6')
plt.xticks(rotation=45, ha='right')
plt.show()

# Histograma para cada coluna
plt.figure(figsize=(12, 8))
dadossheet6.hist(bins=20, figsize=(12, 8), edgecolor='black')
plt.suptitle('Histograma - Dados do dadossheet6', y=1.02)
plt.show()

# Heatmap de correlação
plt.figure(figsize=(12, 8))
sns.heatmap(dadossheet6.corr(), annot=True, cmap='coolwarm', linewidths=.5)
plt.title('Heatmap de Correlação - Dados do dadossheet6')
plt.show()